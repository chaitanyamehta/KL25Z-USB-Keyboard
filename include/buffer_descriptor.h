#ifndef __BUFFER_DESCRIPTOR_H
#define __BUFFER_DESCRIPTOR_H

#include <stdint.h>

#define RX 0
#define TX 1

#define EVEN 0
#define ODD 1

#define DATA0 0
#define DATA1 1

#define BUFFER_DESCRIPTOR_INDEX(endpoint, direction, destination) ((endpoint << 2) | (direction << 1) | destination)

#define BUFFER_DESCRIPTOR_BYTE_COUNT_MASK (0x3FF0000U)
#define BUFFER_DESCRIPTOR_BYTE_COUNT_SHIFT (16U)
#define BUFFER_DESCRIPTOR_OWN_MASK (0x80U)
#define BUFFER_DESCRIPTOR_OWN_SHIFT (7U)
#define BUFFER_DESCRIPTOR_DATA_MASK (0x40U)
#define BUFFER_DESCRIPTOR_DATA_SHIFT (6U)
#define BUFFER_DESCRIPTOR_KEEP_MASK (0x20U)
#define BUFFER_DESCRIPTOR_KEEP_SHIFT (5U)
#define BUFFER_DESCRIPTOR_NINC_MASK (0x10U)
#define BUFFER_DESCRIPTOR_NINC_SHIFT (4U)
#define BUFFER_DESCRIPTOR_DTS_MASK (0x8U)
#define BUFFER_DESCRIPTOR_DTS_SHIFT (3U)
#define BUFFER_DESCRIPTOR_BDT_STALL_MASK (0x4U)
#define BUFFER_DESCRIPTOR_BDT_STALL_SHIFT (2U)

#define BUFFER_DESCRIPTOR_TOK_PID_MASK (0x3CU)
#define BUFFER_DESCRIPTOR_TOK_PID_SHIFT (2U)

#define BUFFER_DESCRIPTOR(count, data) ((count << BUFFER_DESCRIPTOR_BYTE_COUNT_SHIFT) | BUFFER_DESCRIPTOR_OWN_MASK | (data ? BUFFER_DESCRIPTOR_DATA_MASK : 0x0U) | BUFFER_DESCRIPTOR_DTS_MASK)
#define BUFFER_DESCRIPTOR_TOK_PID(field) ((field & BUFFER_DESCRIPTOR_TOK_PID_MASK) >> BUFFER_DESCRIPTOR_TOK_PID_SHIFT)

typedef struct
{
    uint32_t fields;
    void *bufferAddress;
} buffer_descriptor_t;

#endif
